# -*- coding: utf-8 -*-
"""Restaurant Customer Intelligence System.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RlurbmRT8qtV8p1i90x03pWqsIbnYiyD
"""

import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime

# Mock customer database
def create_mock_customer_data():
    customers = {
        'John Smith': {
            'visits': 15,
            'favorite_dishes': ['Wagyu Steak', 'Truffle Pasta', 'Lobster Thermidor'],
            'preferences': ['No spicy food', 'Medium-rare steak'],
            'allergies': ['Shellfish'],
            'avg_spend': 150,
            'last_visit': '2025-02-01',
            'past_orders': [
                {'date': '2025-02-01', 'items': ['Wagyu Steak', 'Red Wine']},
                {'date': '2025-01-15', 'items': ['Truffle Pasta', 'Caesar Salad']},
            ]
        },
        'Emma Davis': {
            'visits': 8,
            'favorite_dishes': ['Seared Salmon', 'Vegetable Risotto', 'Chocolate Souffle'],
            'preferences': ['Gluten-free options', 'Light dressing'],
            'allergies': ['Gluten'],
            'avg_spend': 120,
            'last_visit': '2025-02-10',
            'past_orders': [
                {'date': '2025-02-10', 'items': ['Seared Salmon', 'White Wine']},
                {'date': '2025-01-28', 'items': ['Vegetable Risotto', 'Green Salad']},
            ]
        }
    }
    return customers

# Mock menu database
def create_mock_menu():
    return {
        'Appetizers': ['Caesar Salad', 'Green Salad', 'Lobster Bisque', 'Foie Gras'],
        'Main Courses': ['Wagyu Steak', 'Truffle Pasta', 'Seared Salmon', 'Lobster Thermidor', 'Vegetable Risotto'],
        'Desserts': ['Chocolate Souffle', 'Cr√®me Br√ªl√©e', 'Tiramisu'],
        'Drinks': ['Red Wine', 'White Wine', 'Champagne', 'Sparkling Water']
    }

# AI recommendation function (mock)
def get_recommendations(customer_data, menu):
    # In a real system, this would use ML to generate recommendations
    # Here we'll use a simple rule-based system
    all_menu_items = [item for category in menu.values() for item in category]

    # Filter out items they've already tried
    past_items = set([item for order in customer_data['past_orders'] for item in order['items']])
    new_items = [item for item in all_menu_items if item not in past_items]

    # Mock recommendation logic
    recommended_items = np.random.choice(new_items, size=min(3, len(new_items)), replace=False)
    return list(recommended_items)

# Main Streamlit app
def main():
    st.set_page_config(page_title="Premium Restaurant Customer Intelligence", layout="wide")

    # Initialize session state
    if 'customers' not in st.session_state:
        st.session_state.customers = create_mock_customer_data()
    if 'menu' not in st.session_state:
        st.session_state.menu = create_mock_menu()

    # Header
    st.title("üçΩÔ∏è Premium Restaurant Customer Intelligence")

    # Customer search
    st.subheader("Customer Lookup")
    customer_name = st.selectbox(
        "Select or type customer name:",
        options=list(st.session_state.customers.keys())
    )

    if customer_name:
        customer = st.session_state.customers[customer_name]

        # Display customer information in columns
        col1, col2 = st.columns(2)

        with col1:
            st.markdown("### Customer Profile")
            st.markdown(f"**Total Visits:** {customer['visits']}")
            st.markdown(f"**Average Spend:** ${customer['avg_spend']}")
            st.markdown(f"**Last Visit:** {customer['last_visit']}")

            st.markdown("### Preferences & Allergies")
            for pref in customer['preferences']:
                st.info(pref)
            for allergy in customer['allergies']:
                st.warning(f"‚ö†Ô∏è Allergy: {allergy}")

        with col2:
            st.markdown("### Favorite Dishes")
            for dish in customer['favorite_dishes']:
                st.success(dish)

            st.markdown("### AI Recommendations")
            recommendations = get_recommendations(customer, st.session_state.menu)
            for dish in recommendations:
                st.markdown(f"ü§ñ Try: **{dish}**")

        # Order History
        st.markdown("### Order History")
        history_df = pd.DataFrame([
            {
                'Date': order['date'],
                'Items': ', '.join(order['items'])
            }
            for order in customer['past_orders']
        ])
        st.dataframe(history_df, use_container_width=True)

        # New Order Section
        st.markdown("### New Order")
        selected_category = st.selectbox("Select Category", options=list(st.session_state.menu.keys()))
        if selected_category:
            selected_items = st.multiselect(
                "Select Items",
                options=st.session_state.menu[selected_category]
            )

            if st.button("Add Order"):
                # In a real system, this would save to a database
                new_order = {
                    'date': datetime.now().strftime('%Y-%m-%d'),
                    'items': selected_items
                }
                customer['past_orders'].insert(0, new_order)
                st.success("Order added successfully!")
                st.experimental_rerun()

if __name__ == "__main__":
    main()